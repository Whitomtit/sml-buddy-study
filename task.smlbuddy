{"name":"Experimnet Study","program":"datatype btree = Empty | Node of int * btree * btree\nfun mirror t =\n  case t of\n    Empty => Empty\n  | Node (n, l, r) => Node (n, mirror r, mirror l);\n\ndatatype CONFIG = mirror_type___ of btree;\nexception Failure of string\ndatatype ae = CONST of int | VAR of string | POWER of string * int | TIMES of ae list | SUM of ae list\nfun map f (l, x) = case l of [] => [] | hd::tl => (f (hd, x)) :: (map f (tl, x))\nfun diff (e, x) = case e of CONST n => CONST 0 | VAR a => if a <> x then CONST 0 else CONST 1 | POWER (a, n) => if n < 0 then raise (Failure \"Invalid\") else if n = 0 orelse a <> x then CONST 0 else if n = 1 then CONST n else TIMES [CONST n, POWER (a, n-1)] | TIMES l => (case l of [] => raise (Failure \"Invalid\") | [hd] => diff (hd, x) | hd::tl => SUM [TIMES (diff (hd, x) :: tl), TIMES [hd, diff (TIMES tl, x)]]) | SUM l => (case l of [] => raise (Failure \"Invalid\") | _ => SUM (map diff (l, x)))\ndatatype CONFIG = diff_type___ of ae * string","functionNames":["mirror", "diff"]}